//Password column in sql must be BINARY, length 60
//Username and email must be UNIQUE

//Need to install express-validator to validate form inputs?
var expressValidator = require('express-validator');
//the above also was entered in index.js but I'm confused about where to include it in our project


//(Must mount middleware in your app before you get access to the validation/sanitation methods)
app.use(expressValidator(middlewareOptions));

req.checkBody.username – inserted into index.js post route

//Here's the whole block of code for express-validator:

//returns registration complete and processes user data
router.post('register', function(res, req, next)
{

//validates entered data as not empty
  req.checkBody('username', 'Username cannot be empty.').notEmpty();
  req.checkBody('username', 'Username must be between 4-15 characters long.').len(4,15);
  req.checkBody('email', 'The email address you entered is invalid. Please try again.').isEmail();
  req.checkBody('email', 'The email address must be between 8-100 characters long. Please try again.').len(8,100);
  req.checkBody('password', 'Password must be between 8-100 characters long. Please try again.').len(8,100);
  //this seems like an excessive list of password requirements but I'm unsure what means exactly what so I can't remove any for now. Note, there appears to be a redundant check for password length at the end of this line -- {8,}. Not sure why.
  req.checkBody('password', 'Password must contain at least one lowercase character, one uppercase character, a number, and a special character.').matches(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).{8,}$/, "i");
//i believe we used confirm-password here
  req.checkBody('reEnterPassword', 'Password must be between 8-100 characters long.').len(8,100);
  req.checkBody('reEnterPassword', 'Passwords do not match. Please try again.').equals(password);
//creates a constant for any error thrown?
  const errors = req.validationErrors();
//stringifies and logs the errors to the console
  if (errors) {
    console.log('errors: ${JSON.stringify(errors)}');
//returns the registration page with an error title and error messages-- need to update to match our code
  res.render('register', {
    title: 'Registration Error',
    errors: errors
    });
  }
  else {
    const username = req.body.username;
    const email = req.body.email;
    const password = req.body.password;
    //requires connection contained in db.js file
  //a constant is a value that will never change (opp of var)
    const db = require('../db.js');


   // below is the handlebars render of the registration error messages. Uses bootstrap.

    {{#if errors}}
      {{#each error}}
      <!-- the below class gives a bootstrap error format -->
      <div class="alert-danger">
                {{this.msg}}
      </div>
      {{/each}}
    {{/if}}


//PASSWORD HASHING

//npm install bcrypt

var passport = require('passport');
var bcrypt = require('bcrypt');
//number of rounds the plain text password goes through before the final hash
const saltRounds = 10;

//this bcrypt function wraps around our db.query and hashes the variable password
    bcrypt.hash(password, saltRounds, function (err, hash) {
      //notice that the password value below has now been replaced by "hash"
	//the query is now wrapped inside the bcrypt function
      db.query('INSERT INTO table (username, email, password) VALUES (?, ?, ?)', [username, email, hash], function (error, results, fields) {
        if (error) throw error;
        db.query('SELECT LAST_INSERT_ID() as user_id', function(error, results, fields) {
          if (error) throw error;
//this grabs the user id from results
	          const user_id = results[0];
//results here is the user ID selected above
          console.log(results[0]);
          //login uses the serializeUser function below
          req.login(user_id), function(err) {
            //redirects to home page if user logs in successfully
            res.redirect('/');
            //now we need to store the cookie in the session with another passport function
            //serialize is writing the user session
            //deserialize is reading the user session
          res.render('index', {title: 'Registration Complete'});

        })
        //this renders the registration complete page once the request is complete, which will say registration completed

      })
      //bcrypt function ends here:
    });

  }

);
  res.render('index', {title: 'Registration Complete'});
});
//each time we want to store user_id in a session we call this
passport.serializeUser(function(user_id, done) {
  done(null, user_id);
});
//any time we want to read from  a session we call this
passport.deserializeUser(function(id, done) {
  User.findById(id, function (err, user_id) {
    done(null, user_id);
  });
});



//LOGGING USER IN WITH PASSPORT and EXPRESS-SESSION

//npm install express-session passport express-mysql-session
//creates a session and return to user an authentication cookie which acts as an id

var session = require('express-session');
var passport = require('passport');
var MySQLStore = require('express-mysql-session')(session);

var options = {
  host: ,
  user: ,
  password: ,
  database: ,
};

var sessionStore = new MySQLStore(options);

//session stuff here. creates a session id on the back end and returns a cookie to the client
//must be installed in a specific location but I didn't quite get where/why. Was below body-parser in example
app.use(session({
  secret: 'keyboard cat', //this should be a random string of characters, use random char generator?
  store: sessionStore, //session table should be created autoatically, if not use schema pt 6 3:30
  resave: false, //don't save again with every refresh that doesn't provide new data
  saveUninitialized: false //don't want to create a new session with every unlogged in revisit
    // cookie: { secure: true } – if you have https you need to ensure that this is true
}));

//when cookie is created, inspect--> application → cookies should show connect-sid cookie
//session data now being stored in db, will be stored until user logs out

// the cookie created with passport.js will act as a key to the user's backend session, within the key will be a userid

//paste below middleware the following code to initialize passport

app.use(passport.initialize());
app.use(passport.session());

//the following modifies routes to check for authentication
function authenticationMiddleware() {
  return (req, res, next) => {
    //there was an error in the demo code, i added a preceding ' here after the $
    req.session.passport.user: $'{JSON.stringify(req.session.passport)}');

  if (req.isAuthenticated()) return next();

  res.redirect('/login')
}

//this line of code is pasted into our routes for any restricted page: "authenticationMiddleware()," like below:

router.get('/page-name', authenticationMiddleware(), function(req,res) {
  res.render('page-name', {title: 'Title'});
});


//MODS TO LOGIN PAGE
//<form method="POST" action=/login">

//sample login route:
router.post('register', passport.authenticate{
  ('local', //because we're using a local database
    {
      successRedirect: '/transactions',
      failureRedirect: '/login'
    }
}));

//need another package: passport-local (npm install passport-local, require as well)
var LocalStrategy = require('passport-local'), Strategy;
//pasted below routes in app.js
passport.use(new LocalStrategy(
  //below drawn from our value names, username, etc
  function(username, password, done) {
      const db = require('./db'); //pulls in database module
      db.query('SELECT id, password from users WHERE username = ?', [username],
      function(err, resutls, fields) {
        //done is provided by PASSPORT
        if (err) {done(err)};
        //now determine if username exists
        if (results.length === 0) {
          done(null, false);
        }
        else {
          //now hash the user's plaintext password again to see if it's a match
          //make sure you require bcrypt, var bcrypt = require('bcrypt');
          const hash = results[0].password.toString();

          bcrypt.compare(password, hash, function(err, response) {
            if (response === true) {
              //43 is a placeholder here
              return done(null,{user_id: results[0].id});
            }
            else {
              return done(null, false);
            }

          });
        }
      })
    }

    //need to create a logout in routes
    router.get('/logout', function(req, res) {
      //this is a passport logout function
      req.logout();
          //now need to end sesion with data store in sql
      req.session.destroy();
      res.redirect('/');
    });

    //need to create a global object to tell us whether req.isAuthenticated is true
    //in app.js right before routes
    app.use(function(res, req, next) {
      res.locals.isAuthenticated = req.isAuthenticated();
      next() {
        //function to display either login button or logout button
      }
    });

    //still need to implement flash messages in login form.... ?
